#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoMiddleware
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class CryptoMiddlewareDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttoken(token instance);
    partial void Updatetoken(token instance);
    partial void Deletetoken(token instance);
    #endregion
		
		public CryptoMiddlewareDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CryptoMiddlewareDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CryptoMiddlewareDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CryptoMiddlewareDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<token> tokens
		{
			get
			{
				return this.GetTable<token>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _symbol;
		
		private string _name;
		
		private long _total_supply;
		
		private string _contract_address;
		
		private int _total_holders;
		
		private System.Nullable<decimal> _price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsymbolChanging(string value);
    partial void OnsymbolChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ontotal_supplyChanging(long value);
    partial void Ontotal_supplyChanged();
    partial void Oncontract_addressChanging(string value);
    partial void Oncontract_addressChanged();
    partial void Ontotal_holdersChanging(int value);
    partial void Ontotal_holdersChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    #endregion
		
		public token()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_symbol", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string symbol
		{
			get
			{
				return this._symbol;
			}
			set
			{
				if ((this._symbol != value))
				{
					this.OnsymbolChanging(value);
					this.SendPropertyChanging();
					this._symbol = value;
					this.SendPropertyChanged("symbol");
					this.OnsymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_supply", DbType="BigInt NOT NULL")]
		public long total_supply
		{
			get
			{
				return this._total_supply;
			}
			set
			{
				if ((this._total_supply != value))
				{
					this.Ontotal_supplyChanging(value);
					this.SendPropertyChanging();
					this._total_supply = value;
					this.SendPropertyChanged("total_supply");
					this.Ontotal_supplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contract_address", DbType="VarChar(66) NOT NULL", CanBeNull=false)]
		public string contract_address
		{
			get
			{
				return this._contract_address;
			}
			set
			{
				if ((this._contract_address != value))
				{
					this.Oncontract_addressChanging(value);
					this.SendPropertyChanging();
					this._contract_address = value;
					this.SendPropertyChanged("contract_address");
					this.Oncontract_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_holders", DbType="Int NOT NULL")]
		public int total_holders
		{
			get
			{
				return this._total_holders;
			}
			set
			{
				if ((this._total_holders != value))
				{
					this.Ontotal_holdersChanging(value);
					this.SendPropertyChanging();
					this._total_holders = value;
					this.SendPropertyChanged("total_holders");
					this.Ontotal_holdersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(38,2) NULL")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
